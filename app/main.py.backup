"""
FastAPI application for the Sanctions Screening Platform.
"""
import logging
import uuid
from typing import Dict, Any
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager

from app.core.config import settings
from app.services.screening_service import ScreeningService
from app.models.schemas import ScreeningRequest, ScreeningResponse

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global service instance
screening_service = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager."""
    global screening_service
    
    # Startup
    logger.info("Starting Sanctions Screening Platform...")
    screening_service = ScreeningService()
    await screening_service.initialize()
    
    yield
    
    # Shutdown
    logger.info("Shutting down Sanctions Screening Platform...")
    if screening_service:
        await screening_service.cleanup()

# Create FastAPI app
app = FastAPI(
    title="Sanctions Screening Platform",
    description="A production-quality platform for screening entities against sanctions lists",
    version="1.0.0",
    lifespan=lifespan
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.middleware("http")
async def track_requests(request: Request, call_next):
    """Track requests with unique IDs."""
    # Generate a unique request ID instead of using hash
    request_id = str(uuid.uuid4())
    request.state.request_id = request_id
    
    # Process the request
    response = await call_next(request)
    
    # Add request ID to response headers
    response.headers["X-Request-ID"] = request_id
    
    return response

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Global exception handler."""
    request_id = getattr(request.state, 'request_id', str(uuid.uuid4()))
    
    logger.error(f"Request {request_id} failed: {str(exc)}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "request_id": request_id,
            "detail": str(exc) if settings.debug else "An unexpected error occurred"
        }
    )

@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {"status": "healthy", "service": "sanctions-screening-platform"}

@app.post("/api/v1/screen", response_model=ScreeningResponse)
async def screen_entity(request: ScreeningRequest):
    """Screen an entity against sanctions lists."""
    if not screening_service:
        raise HTTPException(status_code=503, detail="Service not initialized")
    
    try:
        result = await screening_service.screen_entity_async(request)
        return result
    except Exception as e:
        logger.error(f"Screening failed: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Screening failed: {str(e)}")

@app.get("/api/v1/stats")
async def get_screening_stats():
    """Get screening statistics."""
    if not screening_service:
        raise HTTPException(status_code=503, detail="Service not initialized")
    
    try:
        stats = await screening_service.get_statistics()
        return stats
    except Exception as e:
        logger.error(f"Failed to get statistics: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Failed to get statistics: {str(e)}")

@app.get("/api/v1/sanctions-lists")
async def get_sanctions_lists():
    """Get available sanctions lists."""
    if not screening_service:
        raise HTTPException(status_code=503, detail="Service not initialized")
    
    try:
        lists = await screening_service.get_sanctions_lists()
        return {"lists": lists}
    except Exception as e:
        logger.error(f"Failed to get sanctions lists: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Failed to get sanctions lists: {str(e)}")
